
import panda_py
from panda_py_remote.core.domain import Errors, RobotState, RobotMode

def convert_libfranka_errors_to_robot_errors(errors: panda_py.libfranka.Errors) -> Errors:
    return Errors(
        cartesian_motion_generator_acceleration_discontinuity=errors.cartesian_motion_generator_acceleration_discontinuity,
        cartesian_motion_generator_elbow_limit_violation=errors.cartesian_motion_generator_elbow_limit_violation,
        cartesian_motion_generator_elbow_sign_inconsistent=errors.cartesian_motion_generator_elbow_sign_inconsistent,
        cartesian_motion_generator_joint_acceleration_discontinuity=errors.cartesian_motion_generator_joint_acceleration_discontinuity,
        cartesian_motion_generator_joint_position_limits_violation=errors.cartesian_motion_generator_joint_position_limits_violation,
        cartesian_motion_generator_joint_velocity_discontinuity=errors.cartesian_motion_generator_joint_velocity_discontinuity,
        cartesian_motion_generator_joint_velocity_limits_violation=errors.cartesian_motion_generator_joint_velocity_limits_violation,
        cartesian_motion_generator_start_elbow_invalid=errors.cartesian_motion_generator_start_elbow_invalid,
        cartesian_motion_generator_velocity_discontinuity=errors.cartesian_motion_generator_velocity_discontinuity,
        cartesian_motion_generator_velocity_limits_violation=errors.cartesian_motion_generator_velocity_limits_violation,
        cartesian_position_limits_violation=errors.cartesian_position_limits_violation,
        cartesian_position_motion_generator_invalid_frame=errors.cartesian_position_motion_generator_invalid_frame,
        cartesian_position_motion_generator_start_pose_invalid=errors.cartesian_position_motion_generator_start_pose_invalid,
        cartesian_reflex=errors.cartesian_reflex,
        cartesian_velocity_profile_safety_violation=errors.cartesian_velocity_profile_safety_violation,
        cartesian_velocity_violation=errors.cartesian_velocity_violation,
        communication_constraints_violation=errors.communication_constraints_violation,
        controller_torque_discontinuity=errors.controller_torque_discontinuity,
        force_control_safety_violation=errors.force_control_safety_violation,
        force_controller_desired_force_tolerance_violation=errors.force_controller_desired_force_tolerance_violation,
        instability_detected=errors.instability_detected,
        joint_motion_generator_acceleration_discontinuity=errors.joint_motion_generator_acceleration_discontinuity,
        joint_motion_generator_position_limits_violation=errors.joint_motion_generator_position_limits_violation,
        joint_motion_generator_velocity_discontinuity=errors.joint_motion_generator_velocity_discontinuity,
        joint_motion_generator_velocity_limits_violation=errors.joint_motion_generator_velocity_limits_violation,
        joint_move_in_wrong_direction=errors.joint_move_in_wrong_direction,
        joint_p2p_insufficient_torque_for_planning=errors.joint_p2p_insufficient_torque_for_planning,
        joint_position_limits_violation=errors.joint_position_limits_violation,
        joint_position_motion_generator_start_pose_invalid=errors.joint_position_motion_generator_start_pose_invalid,
        joint_reflex=errors.joint_reflex,
        joint_velocity_violation=errors.joint_velocity_violation,
        max_goal_pose_deviation_violation=errors.max_goal_pose_deviation_violation,
        max_path_pose_deviation_violation=errors.max_path_pose_deviation_violation,
        power_limit_violation=errors.power_limit_violation,
        self_collision_avoidance_violation=errors.self_collision_avoidance_violation,
        start_elbow_sign_inconsistent=errors.start_elbow_sign_inconsistent,
        tau_j_range_violation=errors.tau_j_range_violation
    )
        

        
def convert_libfranka_state_to_robot_state(state: panda_py.libfranka.RobotState) -> RobotState:
   
    return RobotState(
        EE_T_K=state.EE_T_K,
        F_T_EE=state.F_T_EE,
        F_x_Cee=state.F_x_Cee,
        F_x_Cload=state.F_x_Cload,
        F_x_Ctotal=state.F_x_Ctotal,
        I_ee=state.I_ee,
        I_load=state.I_load,
        I_total=state.I_total,
        K_F_ext_hat_K=state.K_F_ext_hat_K,
        O_F_ext_hat_K=state.O_F_ext_hat_K,
        O_T_EE=state.O_T_EE,
        O_T_EE_c=state.O_T_EE_c,
        O_T_EE_d=state.O_T_EE_d,
        O_dP_EE_c=state.O_dP_EE_c,
        O_dP_EE_d=state.O_dP_EE_d,
        O_ddP_EE_c=state.O_ddP_EE_c,
        cartesian_collision=state.cartesian_collision,
        cartesian_contact=state.cartesian_contact,
        control_command_success_rate=state.control_command_success_rate,
        current_errors=convert_libfranka_errors_to_robot_errors(state.current_errors),
        ddelbow_c=state.ddelbow_c,
        ddq_d=state.ddq_d,
        delbow_c=state.delbow_c,
        dq=state.dq,
        dq_d=state.dq_d,
        dtau_J=state.dtau_J,
        dtheta=state.dtheta,
        elbow=state.elbow,
        elbow_c=state.elbow_c,
        elbow_d=state.elbow_d,
        joint_collision=state.joint_collision,
        joint_contact=state.joint_contact,
        last_motion_errors=convert_libfranka_errors_to_robot_errors(state.last_motion_errors),
        m_ee=state.m_ee,
        m_load=state.m_load,
        m_total=state.m_total,
        q=state.q,
        q_d=state.q_d,
        robot_mode=RobotMode(state.robot_mode.value),
        tau_J=state.tau_J,
        tau_J_d=state.tau_J_d,
        tau_ext_hat_filtered=state.tau_ext_hat_filtered,
        theta=state.theta,
        time=state.time.to_sec()
        )
    